<tool id="intervalfilter" name="Filter for Informative Intervals" version="0.1">
    <requirements>
        <requirement type="package">pysam</requirement>
    </requirements>
    <stdio>
        <exit_code range="1:" level="fatal" />
        <regex match="ERROR" source="stderr" level="fatal" />
    </stdio>
    <description>Finds regions in a VCF file that have enough informative sites for IM analyses
    </description>
    <command>
        <![CDATA[
            #if $input_vcf.is_of_type("vcf_bgzip")
                ln -fs $input_vcf input.vcf.gz &&
                ln -fs $input_vcf.metadata.tabix_index input.vcf.gz.tbi &&
            #end if
            python $__tool_directory__/informative_filter.py
            #if $input_vcf.is_of_type('vcf_bgzip')
            --vcf input.vcf.gz
            #else
            --vcf $input_vcf
            #end if
            --bed $input_bed
            $indel
            $remove_multi
            $filterxy
            #if int($remove_missing) != -1:
            --remove-missing $remove_missing
            #end if
            #if $return_mode.return_setcount == 'some':
            --randcount $return_mode.region_count
            #end if
            --min-length $min_length
            #if $cpg_cond.cpg_bool:
            --parsecpg $cpg_cond.cpg_reg
            #end if
            #if $input_vcf.is_of_type('vcf_bgzip'):
            --tbi $input_vcf.metadata.tabix_index
            #end if
            | sort -V > $output
        ]]>



    </command>
    <inputs>
        <param format="vcf_bgzip" name="input_vcf" type="data" label="VCF File (bgzipped)" />
        <param format="bed" name="input_bed" type="data" label="BED regions to filter" />
        <param type="boolean" name="indel" label="Don't count indels as informative" checked="true" truevalue="--remove-indels" falsevalue=""/>
        <param type="boolean" name="remove_multi" label="Don't count sites with more than two alleles as informative" checked="true" truevalue="--remove-multi" falsevalue=""/>
        <param type="integer" name="remove_missing" label="Missing Data (-1 for no filter, 0 for filter any missing data, 1+ for remove sites with n missing individuals)" value="-1" />
        <param type="integer" name="informative_count" label="Number of sites required to deem region informative" value="3" />
        <param type="integer" name="min_length" label="Minimum length of valid regions" value="1000" />
        <param type="boolean" name="filterxy" label="Filter out X/Y regions" checked="true" truevalue="--no-xy" falsevalue=""/>
        <conditional name="cpg_cond">
            <param name="cpg_bool" type="boolean" label="Filter CpGs"/>
            <when value="true">
                <param name="cpg_reg" type="data" label="Reference Genome" format="fasta,fasta.gz" />
            </when>
        </conditional>
        <conditional name="return_mode">
            <param name="return_setcount" type="select" label="Output Type" >
                <option value="some" selected="True">Return set number of regions</option>
                <option value="all">Return all passing regions</option>
            </param>
            <when value="some">
                <param type="integer" name="region_count" label="Number of regions to return" value="200"/>
            </when>
        </conditional>



    </inputs>
    <outputs>
        <data format="bed" name="output" />
    </outputs>

</tool>
